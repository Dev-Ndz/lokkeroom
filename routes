router.post('/register', register)

export const register = async (req, res) => {
    const { email, nickname, password } = req.body

    if (!email || !password || !nickname)
        return res.status(400).send({ error: 'Invalid request' })

    try {
        const encryptedPassword = await bcrypt.hash(password, 10)

        await pool.query(
        'INSERT INTO users (email, password, nickname) VALUES ($1, $2, $3)',
        [email, encryptedPassword, nickname]
        )

        return res.send({ info: 'User succesfully created' })
    } catch (err) {
        console.log(err)

        return res.status(500).send({ error: 'Internal server error' })
    }
}

router.post('/login', login)

export const login = async (req, res) => {
    const { email, password } = req.body

    if (!email || !password)
        return res.status(400).send({ error: 'Invalid request' })

    const q = await pool.query(
        'SELECT password, id, nickname from users WHERE email=$1',
        [email]
    )

    if (q.rowCount === 0) {
        return res.status(404).send({ error: 'This user does not exist' })
    }

    const result = q.rows[0]
    const match = await bcrypt.compare(password, result.password)

    if (!match) {
        return res.status(403).send({ error: 'Wrong password' })
    }

    try {
        const token = await sign(
        { id: result.id, nickname: result.nickname, email },
        process.env.JWT_SECRET,
        {
            algorithm: 'HS512',
            expiresIn: '1h',
        })
        return res.send({ token, id: result.id, nickname: result.nickname })
    } catch (err) {
        console.log(err)
        return res.status(500).send({ error: 'Cannot generate token' })
    }
}


router.get('/:lobby_id/get-userlist',getUserList);
router.get('/:lobby_id',getMessages);

router.post('/:lobby_id/add-user', addUser);
router.post('/:lobby_id/remove-user', removeUser);
router.post('/:lobby_id',postMessage);
router.post('/',createLobby);

import {isAdmin, isMember } from './authController.mjs';
import Lobby from '../Model/lobby.mjs'

const isNumber = (value) => typeof value === 'number' && !Number.isNaN(value)

export const getMessages = async (req, res) => {

    const lobbyId = req.params.lobby_id;
    if (!await isMember(req.user.id, lobbyId)) return res.status(401).send('Unauthorized : this user is not a member of this lobby');
    if(isNumber(parseInt(req.query.offset)) && isNumber(parseInt(req.query.limit))){
        try{
            const messages = await Lobby.getPaginatedMessages(lobbyId,req.query.offset, req.query.limit);
            return res.send(messages);
        }catch(err){
            return res.status(500).send({ error: 'Internal server error : could not get messages', message:err })
        }
    }else{
        try{

            const messages = await Lobby.getAllMessages(lobbyId);
            return res.send(messages);
        }catch(err){
            return res.status(500).send({ error: 'Internal server error : could not get all messages', message:err })
        }
    }
}

export const getLobbies = async (req, res) => {
    const userId = req.user.id
    const lobbiesList = await Lobby.getLobbies()
}


export const addUser = async (req, res) => {
    const lobbyId = req.params.lobby_id;
    const{addedUserId} =req.body;
    if (!await isAdmin(req.user.id, lobbyId)) return res.status(401).send('Unauthorized : this user is not an admin of this lobby');
    if (await isMember(addedUserId,lobbyId)) return res.status(400).send('User already added');
    try{
        console.log("lobby: ",lobbyId," addedUser: ",addedUserId);
        Lobby.addUser(addedUserId,lobbyId,false)
        return res.send("user added to lobby")
    }catch(err){
        console.log(err)
        return res.status(500).send({ error: 'Internal server error' })
    }
}
export const removeUser = async (req, res) => {
    const lobbyId = req.params.lobby_id;
    const{removedUserId} =req.body;
    if (!await isAdmin(req.user.id, lobbyId)) return res.status(401).send('Unauthorized : Only an admin can remove the user of this lobby');
    if (!await isMember(removedUserId,lobbyId)) return res.status(400).send('User is not a member of this lobby');
    try{
        Lobby.removeUser(lobbyId,removedUserId)
        return res.send("user removed from lobby")
    }catch(err){
        console.log(err)
        return res.status(500).send({ error: 'Internal server error' })
    }
}
export const postMessage = async (req, res) => {
    const {content} = req.body;
    const timestamp = new Date();
    const lobbyId = req.params.lobby_id;
    const userId = req.user.id;
    if(!await isMember(userId, lobbyId)) return res.status(401).send('Unauthorized : user is not a member of that lobby')
    try{
        Lobby.postMessage(userId,content,lobbyId);
        res.send("messsage send :"+content +"\n"+ timestamp +"\n"+lobbyId);
    }catch(err){
        console.log(err)
        return res.status(500).send({error : err});
    } 
}
export const createLobby = async (req,res) => {
    const {name} = req.body
    let newLobby 
    try{
        newLobby = await Lobby.create(name,false);
        console.log("lobby created : " + name)
        console.log(newLobby);
    }catch(err){
        return res.status(500).send({ error: 'Internal server error : could not create lobby', "err":err })
    }
    try{
        Lobby.addUser(req.user.id, newLobby.rows[0].id, true);
        console.log("Admin right granted to : "+req.user.nickname);
        res.send("Admin right granted to : "+req.user.nickname)

    }catch(err){
        console.log(err)
        return res.status(500).send({ error: 'Internal server error : could not grant admin right' , "err":err})
    }
}

export const getUserList = async(req, res) => {
    try{
        const lobbyId =req.params.lobby_id;
        const userId = req.user.id;
        console.log(userId, lobbyId)
        if(!await isMember(userId, lobbyId)) return res.status(401).send({message:'Unauthorized : you are not a member of this lobby'})
        const userList = await Lobby.getUserList(lobbyId);
        res.send(userList)
    }catch(err){
        return res.status(500).send( {error: "could not retrieve user list"})
    }
}



router.get('/:message_id',getMessage);
router.patch('/:message_id', editMessage);
router.delete('/:message_id', deleteMessage);

router.post('/:user_id', sendPrivateMessage);

import {pool} from '../db.mjs'
import { canModify, isMember } from './authController.mjs';
import Lobby from '../Model/lobby.mjs'

export const editMessage = async (req, res) => {
    const{content} = req.body;
    const messageId = req.params.message_id;
    const timestamp = new Date();
    if (!await canModify(req.user.id,messageId)) return res.status(401).send('Unauthorized : member can only delete their own message');
    try{
        pool.query(
            `UPDATE messages
            SET content = $1, timestamp = $2
            WHERE id = $3;`,[content, timestamp, messageId,]
        );
        return res.send("edited");
    }catch(err){
        console.log(err);
        return res.status(500).send({ error: 'Internal server error' });
    }
}
export const deleteMessage = async (req, res) => {
    const messageId = req.params.message_id;
    if (!await canModify(req.user.id,messageId)) return res.status(401).send('Unauthorized : member can only delete their own message');
    try{
        await pool.query(
            `DELETE FROM messages WHERE id = $1`,[messageId]
        );
        return res.send("message deleted");
    }catch(err){
        console.log(err);
        return res.status(500).send({ error: 'Internal server error' });
    }
}
export const getMessage = async (req, res) => {
    const messageId = req.params.message_id;
    if (!await canModify(req.user.id,messageId)) return res.status(401).send('Unauthorized : this user is not a member of this lobby');
    try{
        const query = await pool.query(
            `SELECT users.nickname, users.id, messages.content, messages.timestamp 
            FROM messages 
            JOIN users ON messages.user_id = users.id
            WHERE messages.id = $1`,
            [messageId]
        );
        const message = query.rows[0];
        return res.send(message);

    }catch(err){
        console.log(err)
        return res.status(500).send({ error: 'Internal server error' })
    }
}
export const sendPrivateMessage = async (req, res) => {
    const {content} = req.body;
    const senderId =req.user.id;
    const recieverId = req.params.user_id
    let lobbyId;
    let privateLobby;
    try{
        privateLobby = await Lobby.getPrivateLobby(senderId,recieverId)
        console.log(privateLobby);
    }catch(err){
        console.log(err)
        return res.status(500).send({ error: 'Internal server error' })
    }

    console.log(privateLobby.length)
    if (privateLobby.length === 0){
        try{
            privateLobby = await Lobby.create("personal message",true)
            console.log('private lobby created');
        }catch(err){
            console.log(err)
            return res.status(500).send({ error: 'Internal server error : couldnt create new private lobby' })
        } 
        try{
            Lobby.addUser(senderId,privateLobby[0].id,false);
        }catch(err){
            console.log(err)
            return res.status(500).send({ error: 'Internal server error : couldnt add user sender '+senderId })
        }
        try{
            Lobby.addUser(recieverId,privateLobby[0].id,false);
        }catch(err){
            console.log(err)
            return res.status(500).send({ error: 'Internal server error : couldnt add user reciever '+recieverId })
        }
    }
    try{
        await Lobby.postMessage(senderId,content, privateLobby[0].id)
        return res.send({privateLobby})
    }catch(err){
        console.log(err)
        return res.status(500).send({ error: 'Internal server error : last catch'})
    }
}

router.get('/lobbies',getLobbies);
router.get('/admin/:lobby_id',CheckIfAdmin);

import User from "../Model/user.mjs"
import { isAdmin} from "./authController.mjs";

export const getLobbies = async(req, res) => {
    try{
        const lobbyList = await User.lobbies(req.user.id);
        return res.send(lobbyList);
    }catch(err){
        return res.status(500).send(err);
    }
}


export const CheckIfAdmin = async(req, res) => {
    try{
        const bool = await isAdmin(req.user.id, req.params.lobby_id)
        return res.send(bool);
    }catch(err){
        return res.status(500).send(err);
    }
}
